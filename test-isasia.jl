# Base code author: Luis Badesa
#
# This code is a simple example of an Economic Dispatch optimization,
# intended to teach how to create a simple optimization problem in JuMP.

##############

## Install JuMP 
# (UNCOMMENT the next block of code if JuMP is not installed)
#= 
    import Pkg
    Pkg.add("JuMP") 
=# 
using JuMP

## Choose an optimization solver 
# (UNCOMMENT the next block of code if the Julia package for the solver is not installed)
#= 
    Pkg.add("HiGHS") 
=# 
using HiGHS

##############

## Input Data
cost = [5  10  15
        5   0   0] # €/MWh
Pₘₐₓ = [20  20  20 
        20   0   0] # Rated power of each generator, MW
Demand = [50  10] # MW
P_max_line = [0  5 
              5  0] # Max power per line

N_nodes = size(cost, 1) # Number of generators
N_GxN =   size(cost, 2) # Number of generators per node

#############
## Create the model for the optimization
model = Model(HiGHS.Optimizer) 

# Define Decision Variables for power generated by each unit:
@variable(model, 0 <= P[ii in 1:N_nodes, jj in 1:N_GxN] <= Pₘₐₓ[ii, jj]) # MW

#=
    La Potencia que sale de cada nodo es igual a la potencia generada menos la demandada al haber solo una linea:
        sum(P[ii, :]) - Demand[ii]
        El modulo de esta potencia tiene que ser como maximo P_max_line[ii, jj]
=#

# Define the constraints:
#Line power flow
for ii in 1:N_nodes, jj in 1:N_nodes 
    if jj != ii
        @constraint(model, line_power, - P_max_line[ii, jj] <= sum(P[ii, :]) - Demand[ii] <= P_max_line[ii, jj]) # Max power in line
    end
end

# Total generated power
@constraint(model, power_balance, sum(P) == sum(Demand))  # Total power output equals demand


# Define the objective function 
Total_cost = sum(cost .* P)

@objective(model, Min, Total_cost)

print(model)
println()

##############

## Solve the optimization problem
optimize!(model)

##############

## Get the solution
println()
println("##########################################")
println()
println("SOLUTION:")
println()

println("Total cost: ", value(Total_cost), " €")
println()

println("Power output:")
for ii in 1:N_nodes, jj in 1:N_GxN
    if value(P[ii,jj]) != 0
        println("  - Generator $ii,$jj: ", value(P[ii,jj]), " MW")
    end
end
println()

λₑₙₑᵣ = dual(power_balance) # Marginal price of energy, €/MWh
println("Price of energy: ", λₑₙₑᵣ, " €/MWh")

P_line = dual(line_power) # Marginal price of energy, €/MWh
println("Power flow in line: ", value(P_line), "MWh")